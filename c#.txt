//drawback of single thread apps..

    class Program
    {
        static void Main (string[] args)
                {
            Method1();
            Console.WriteLine("Method 1 Execution has been completed!!");
            Method2();
            Console.WriteLine("Method 2 Execution has been completed!!");
            Method3();
            Console.WriteLine("Method 3 Execution has been completed!!");
            Console.ReadLine();        
        }
        static void Method1()
        {
            for (int i = 1; i <= 5; i++)
            {
                Console.WriteLine("Method 1:" + i);
            }
        }
        static void Method2() { 
        for(int i=1; i <= 5; i++)
            {
                Console.WriteLine("Method 2:" + i);
                if (i == 2)
                {
                    Console.WriteLine("executing code started");
                    //sleep for 10 seconds
                    Thread.Sleep(10000);
                    Console.WriteLine("Execting code Completed");
                }
            }
                }
        static void Method3() {

            for (int i = 1; i <= 5; i++)
            {
                Console.WriteLine("Method 3:" + i);
            }
        }
 
******************************************************************
concept of multi threading..

    class Program
    {
        static void Main (string[] args)
                {
            //creating thread
            Thread t1 = new Thread(Method1)
            {
                Name = "Thread1"
            };
            
            Thread t2 = new Thread(Method2)
            {
                Name = "Thread2"
            };

            Thread t3 = new Thread(Method3)
            {
                Name = "Thread3"
            };
            t1.Start();
            t2.Start();
            t3.Start();
            Console.WriteLine("Main Thread Ended");
            Console.ReadLine();
        }
        static void Method1()
        {
            Console.WriteLine("Method 1 started Using" + Thread.CurrentThread.Name);

            for (int i = 1; i <= 5; i++)
            {
                Console.WriteLine("Method 1:" + i);
            }
            Console.WriteLine("Method 1 Ended Using"+Thread.CurrentThread.Name);
        }
        static void Method2() {
            Console.WriteLine("Method 2 started Using" + Thread.CurrentThread.Name);
            for (int i=1; i <= 5; i++)
            {
                Console.WriteLine("Method 2:" + i);
                if (i == 2)
                {
                    Console.WriteLine("method 2 db started");
                    //sleep for 10 seconds
                    Thread.Sleep(1000);
                    Console.WriteLine("method2 db Completed");
                }
            }
            Console.WriteLine("Method 2 ended Using" + Thread.CurrentThread.Name);
        }
        static void Method3() {
            Console.WriteLine("Method 3 started Using" + Thread.CurrentThread.Name);

            for (int i = 1; i <= 5; i++)
            {
                Console.WriteLine("Method 3:" + i);
            }
            Console.WriteLine("Method 3 ended  Using" + Thread.CurrentThread.Name);
        }
    }

*******************************************************************************************
//print 5 numbers starting from 0..

    class Program
    {
        static void Main (String[] args)
        {
            showNumbers();
            Console.ReadLine();
        }

        static void showNumbers()
        {
            for (int i = 0; i < 5; i++)
            {
                Console.WriteLine(i);
            }
        }
    }
}
*************************************************
//to call a function through delegate (1)..

class Program
    {
        static void Main (String[] args)
        {
            ThreadStart obj = new ThreadStart(showNumbers);
            Thread t = new Thread(obj);
            t.Start();
            Console.ReadLine();

        }

        static void showNumbers()
        {
            for (int i = 0; i < 5; i++)
            {
                Console.WriteLine(i);
            }
        }
****************************************************
//to call a function through delegate (2)..

 static void Main (String[] args)
        {
            // ThreadStart obj = new ThreadStart(showNumbers);
            ThreadStart obj = showNumbers;
            Thread t = new Thread(obj);
            t.Start();
            Console.ReadLine();

        }

        static void showNumbers()
        {
            for (int i = 0; i < 5; i++)
            {
                Console.WriteLine(i);
            }
        }
***********************************
//to call a function through delegate (3)..

  static void Main (String[] args)
        {
            // ThreadStart obj = new ThreadStart(showNumbers);
          //  ThreadStart obj = showNumbers;
            Thread t = new Thread(showNumbers);
            t.Start();
            Console.ReadLine();

        }

        static void showNumbers()
        {
            for (int i = 0; i < 5; i++)
            {
                Console.WriteLine(i);
            }
        }
****************************
//to call a function through delegate (4) : when we have anonymous function..

 static void Main (String[] args)
        {
          
            ThreadStart obj = delegate () { showNumbers(); };
            Thread t = new Thread(obj);
            t.Start();
            Console.ReadLine();

        }

        static void showNumbers()
        {
            for (int i = 0; i < 5; i++)
            {
                Console.WriteLine(i);
            }
        }
***************************************************
//to call a function through delegate (5) : when we have using lemda expression..

 static void Main (String[] args)
        {
          
            ThreadStart obj = () => showNumbers();
            Thread t = new Thread(obj);
            t.Start();
            Console.ReadLine();

        }

        static void showNumbers()
        {
            for (int i = 0; i < 5; i++)
            {
                Console.WriteLine(i);
            }
        }
******************************************************
// usage of parameterized thread..

static void Main (String[] args)
        {
          
            ParameterizedThreadStart obj = new ParameterizedThreadStart(showNumbers);        
            Thread t = new Thread(obj);
            t.Start(10);
            Console.ReadLine();

        }

        static void showNumbers(object maxNum)
        {
            for (int i = 0;i< Convert.ToInt32(maxNum); i++)
            {
                Console.WriteLine(i);
            }
        }
*************************************
//pehle sare child threads chaleingy phr main method chalega..

 static void Main (String[] args)
        {
            Console.WriteLine("Main MEthod Execution");
            //child1 thread which is reponsible for method 1
            Thread t1 = new Thread(Program.Method1);
            t1.Start();
            //child2 thread which is reponsible for method 2
            Thread t2 = new Thread(Program.Method2);
            t2.Start();
                   
            t1.Join();
            Console.WriteLine(" MEthod 1 Execution Completed");
            t2.Join();
          Console.WriteLine(" MEthod 2 Execution Completed");
            Console.WriteLine("Main MEthod Execution Completed");
            Console.ReadLine();

        }
        static void Method1() {
            Console.WriteLine(" MEthod 1 Execution started");
        }
        static void Method2()
        {
            Console.WriteLine(" MEthod 2 Execution started");
        }
***************************************************
//jab tak thread1 complete nhn hoga process aage nhn chalega..
 static void Main (String[] args)
        {
            Console.WriteLine("Main MEthod Execution");
            //child1 thread which is reponsible for method 1
            Thread t1 = new Thread(Program.Method1);
            t1.Start();
            //child2 thread which is reponsible for method 2
            Thread t2 = new Thread(Program.Method2);
            t2.Start();

            if (t1.Join(2000))
            {
                Console.WriteLine(" MEthod 1 Execution Completed");
            }
            
            t2.Join();
          Console.WriteLine(" MEthod 2 Execution Completed");
            Console.WriteLine("Main MEthod Execution Completed");
            Console.ReadLine();

        }
        static void Method1() {
            Console.WriteLine(" MEthod 1 Execution started");
            Thread.Sleep(5000);
            Console.WriteLine("Method 1 is awake");
        }
        static void Method2()
        {
            Console.WriteLine(" MEthod 2 Execution started");
        }
****************************************************************
//main method execution end and then first method ends : because of join & sleep

  static void Main (String[] args)
        {
            Console.WriteLine("Main MEthod Execution");
            //child1 thread which is reponsible for method 1
            Thread t1 = new Thread(Program.Method1);
            t1.Start();
            //child2 thread which is reponsible for method 2
            Thread t2 = new Thread(Program.Method2);
            t2.Start();

            if (t1.Join(2000))
            {
                Console.WriteLine(" MEthod 1 Execution Completed");
            }           
            t2.Join();
          Console.WriteLine(" MEthod 2 Execution Completed");
            if (t1.IsAlive)
            {
                Console.WriteLine("method 1 execution is still going on");
            }
            else
            {
                Console.WriteLine("Method 1 execution completed");
            }
            Console.WriteLine("Main MEthod Execution Completed");
            Console.ReadLine();

        }
        static void Method1() {
            Console.WriteLine(" MEthod 1 Execution started");
            Thread.Sleep(5000);
            Console.WriteLine("Method 1 is awake");
        }
        static void Method2()
        {
            Console.WriteLine(" MEthod 2 Execution started");
        }
*********************************************************************
//printing table of 2

static void Main(string[] args)
        {
            new Thread(() =>
            {
                Console.WriteLine("Printing Table of 2");
                PrintTable(2);
            }).Start();
            Console.ReadLine();
        }
        static void PrintTable(object objTable)
        {
            int table = (int)objTable;
            for (int i = 1; i <= 10; i++)
                Console.WriteLine(table + " * " + i + " = " + (table * i));
        }
*************************************************************
//when the methods completes, the Console.WriteLine code will show a message containing the ID of the task that finished first. Based on the code, TaskB will finish first.//

class Program
    {
        static void MethodA() { Thread.SpinWait(int.MaxValue); }
        static void MethodB() { Thread.SpinWait(int.MaxValue / 2); }
        static void Main(string[] args)
        {
            var TaskA = Task.Factory.StartNew(MethodA);
            var TaskB = Task.Factory.StartNew(MethodB);
            Console.WriteLine("TaskA id = {0}", TaskA.Id);
            Console.WriteLine("TaskB id = {0}", TaskB.Id);
            var tasks = new Task[] { TaskA, TaskB };
            int whichTask = Task.WaitAny(tasks);
            Console.WriteLine("Task {0} is the gold medal task.",
            tasks[whichTask].Id);
            Console.WriteLine("Press enter to exit");
            Console.ReadLine();
        }
    }
********************************************************************

